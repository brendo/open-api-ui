{
  "swagger": "2.0",
  "info": {
    "title": "Temando API",
    "description": "Providing consumers with more choice and lowering the cost of shipping.",
    "version": "0.1.0"
  },
  "host": "api.temando.com",
  "schemes": [
    "https"
  ],
  "basePath": "/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/session": {
      "post": {
        "summary": "Create a session.",
        "description": "This function returns a Temando API token.",
        "operationId": "Authenticate",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AuthRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Credentials accepted and session tokens created.",
            "schema": {
              "$ref": "#/definitions/SessionResponse"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Destroy a session",
        "description": "This function is generally unused as tokens expire of the own accord.",
        "tags": [
          "Authentication"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "type": "string",
            "required": true,
            "in": "body",
            "name": "session_token"
          }
        ]
      }
    },
    "/accounts": {
      "post": {
        "summary": "Register client account configuration data",
        "description": "Register client account configuration data",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account registered successfully.",
            "schema": {
              "$ref": "#/definitions/createAccountResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get a list of registered accounts",
        "description": "Get a list of registered accounts",
        "tags": [
          "AccountService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "list of registered accounts to be returned",
            "schema": {
              "$ref": "#/definitions/listAccountsResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "summary": "Get account configuration data",
        "description": "Get account configuration data",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "a given account configuration data",
            "schema": {
              "$ref": "#/definitions/getAccountResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update account configuration data",
        "description": "Update account configuration data",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "register",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateAccountRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "a given account configuration data",
            "schema": {
              "$ref": "#/definitions/updateAccountResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/accounts/marco": {
      "get": {
        "summary": "Get account marco",
        "description": "Get account marco",
        "tags": [
          "AccountService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "account marco response",
            "schema": {
              "$ref": "#/definitions/getAccountMarcoResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/users": {
      "post": {
        "summary": "Create a user under the given account",
        "description": "Create a user under the given account",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/createUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully.",
            "schema": {
              "$ref": "#/definitions/createUserResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all users of a given account",
        "description": "Get all users of a given account",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get users response",
            "schema": {
              "$ref": "#/definitions/getUsersResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/users/{userId}": {
      "get": {
        "summary": "Get user",
        "description": "Get user",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "get user response",
            "schema": {
              "$ref": "#/definitions/getUserResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Update user",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/updateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "schema": {
              "$ref": "#/definitions/updateUserResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Delete user",
        "tags": [
          "AccountService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the account",
            "required": true
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully.",
            "schema": {
              "$ref": "#/definitions/deleteUserResponse"
            }
          },
          "errors": {
            "401": {
              "description": "Authentication failed.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "403": {
              "description": "Expired credentials.",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/definitions/Error"
              }
            }
          }
        }
      }
    },
    "/address/verification": {
      "post": {
        "summary": "Perform address verification.",
        "tags": [
          "AddressVerificationService"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address was able to verify",
            "schema": {
              "$ref": "#/definitions/AddressV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/address/completion": {
      "post": {
        "summary": "Perform partial address completion.",
        "tags": [
          "AddressVerificationService"
        ],
        "parameters": [
          {
            "name": "address",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddressV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of addresses that match address partial",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AddressV1"
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/containers/marco": {
      "get": {
        "summary": "Returns the marco for building a new Container",
        "description": "Returns the marco for building a new Container",
        "tags": [
          "ContainerService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the marco template for creating a Container."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers": {
      "post": {
        "summary": "Create a container object in the account.",
        "description": "Create a container object in the account.",
        "tags": [
          "ContainerService"
        ],
        "parameters": [
          {
            "name": "container",
            "in": "body",
            "description": "The container to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Container"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created container with unique ID.",
            "schema": {
              "$ref": "#/definitions/StoredContainer"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "get": {
        "summary": "Get list of containers in the account document.",
        "description": "Get list of containers in the account document.",
        "tags": [
          "ContainerService"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the returned array of records",
            "type": "number",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for the returned array of records.",
            "type": "number",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all of the containers defined.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoredContainer"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{id}": {
      "get": {
        "summary": "Get container from account document.",
        "description": "Get container from account document.",
        "tags": [
          "ContainerService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of container to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the container specified by ID parameter",
            "schema": {
              "$ref": "#/definitions/StoredContainer"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update container.",
        "description": "Update container in account document.",
        "tags": [
          "ContainerService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of container to update",
            "required": true,
            "type": "integer"
          },
          {
            "name": "container",
            "in": "body",
            "description": "The new data to store against the container",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoredContainer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated the container."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove containers.",
        "description": "Remove container from account document.",
        "tags": [
          "ContainerService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of container to remove",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the container."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Container is being used by another service.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/containers/{id}/verification": {},
    "/locations/marco": {
      "get": {
        "summary": "Returns the bluprint for building a new Location",
        "description": "Returns the bluprint for building a new Location",
        "tags": [
          "LocationService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the marco template for creating a Location."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/locations": {
      "post": {
        "summary": "Create a location object in the account.",
        "description": "Create a location object in the account.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "location",
            "in": "body",
            "description": "The location to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created location with unique ID.",
            "schema": {
              "$ref": "#/definitions/StoredLocation"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "get": {
        "summary": "Get list of locations in the account document.",
        "description": "Get list of locations in the account document.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the returned array of records",
            "type": "number",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for the returned array of records.",
            "type": "number",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all of the locations defined.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoredLocation"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "summary": "Get location from account document.",
        "description": "Get location from account document.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of location to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the location specified by ID parameter",
            "schema": {
              "$ref": "#/definitions/StoredLocation"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update location.",
        "description": "Update location in account document.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of location to update",
            "required": true,
            "type": "integer"
          },
          {
            "name": "location",
            "in": "body",
            "description": "The new data to store against the location",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoredLocation"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated the location."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove locations.",
        "description": "Remove location from account document.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of location to remove",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the location."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Location is being used by another service.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/locations/{id}/verification": {
      "get": {
        "summary": "Perform an algorithmic address verification.",
        "description": "V1 of this service may push through to an external service.",
        "tags": [
          "LocationService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of location to verify",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "201": {
            "description": "Returns a pass/fail verification and updates the location record."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/shipments/{id}": {
      "get": {
        "summary": "Get shipment from account document by id.",
        "tags": [
          "ShipmentService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of shipment to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the shipment specified by id parameter",
            "schema": {
              "$ref": "#/definitions/shipmentResponseV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/shipments/{id}/quote": {
      "get": {
        "summary": "Get quote for specified shipment.",
        "tags": [
          "ShipmentService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of shipment to quote",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the quote for shipment specified by id parameter",
            "schema": {
              "$ref": "#/definitions/shipmentQuoteResponse"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/shipments/{id}/fulfill": {
      "post": {
        "summary": "Fulfill specified shipment.",
        "tags": [
          "ShipmentService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of shipment to fulfill",
            "required": true,
            "type": "string"
          },
          {
            "name": "shipment",
            "in": "body",
            "description": "The data required to fulfill shipment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipmentFulfillRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shipment fullfill response",
            "schema": {
              "$ref": "#/definitions/shipmentFulfillResponseV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/shipments": {
      "post": {
        "summary": "Create a new shipment.",
        "tags": [
          "ShipmentService"
        ],
        "parameters": [
          {
            "name": "shipment",
            "in": "body",
            "description": "The new shipment data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/shipmentRequestV1"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully create a new shipment",
            "schema": {
              "$ref": "#/definitions/shipmentResponseV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary": "Get order from account document by id.",
        "tags": [
          "OrderService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of order to fetch",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the order specified by id parameter",
            "schema": {
              "$ref": "#/definitions/orderV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      },
      "put": {
        "summary": "Update order from account document by id.",
        "tags": [
          "OrderService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of order to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "order",
            "in": "body",
            "description": "The new data to store against the order",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orderV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the updated order specified by id parameter",
            "schema": {
              "$ref": "#/definitions/orderV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete order from account document by id.",
        "tags": [
          "OrderService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of order to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the order.",
            "schema": {
              "$ref": "#/definitions/orderV1"
            }
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/orders/marco": {
      "get": {
        "summary": "Returns the marco for building a new Order.",
        "tags": [
          "OrderService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Marco template for creating a Order."
          },
          "400": {
            "description": "Bad Request.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "404": {
            "description": "Not Found.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          },
          "500": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/ErrorV1"
            }
          }
        }
      }
    },
    "/products/marco": {
      "get": {
        "summary": "Returns the marco for building a new Product",
        "description": "Returns the marco for building a new Product",
        "tags": [
          "ProductService"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns the marco template for creating a Product."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/products": {
      "post": {
        "summary": "Create a Product object in the account.",
        "description": "Create a Product object in the account.",
        "tags": [
          "ProductService"
        ],
        "parameters": [
          {
            "name": "Product",
            "in": "body",
            "description": "The Product to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Newly created Product with unique ID.",
            "schema": {
              "$ref": "#/definitions/StoredProduct"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "get": {
        "summary": "Get list of Products in the account document.",
        "description": "Get list of Products in the account document.",
        "tags": [
          "ProductService"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset for the returned array of records",
            "type": "number",
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit for the returned array of records.",
            "type": "number",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of all of the Products defined.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/StoredProduct"
              }
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get Product from account document.",
        "description": "Get Product from account document.",
        "tags": [
          "ProductService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Product to fetch",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Return the Product specified by ID parameter",
            "schema": {
              "$ref": "#/definitions/StoredProduct"
            }
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update Product.",
        "description": "Update Product in account document.",
        "tags": [
          "ProductService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Product to update",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Product",
            "in": "body",
            "description": "The new data to store against the Product",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoredProduct"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully updated the Product."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "The request schema did not meet the specification.",
            "schema": {
              "$ref": "#/definitions/ErrorInSchema"
            }
          }
        }
      },
      "delete": {
        "summary": "Remove Products.",
        "description": "Remove Product from account document.",
        "tags": [
          "ProductService"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of Product to remove",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated the Product."
          },
          "401": {
            "description": "Authentication failed.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Expired credentials.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "412": {
            "description": "Product is being used by another service.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "code",
            "description"
          ]
        }
      },
      "required": [
        "error"
      ]
    },
    "createAccountRequest": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/create-account-request+v1#",
      "title": "Account",
      "description": "Account registration schema",
      "type": "object",
      "properties": {
        "platform": {
          "description": "Platform",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "privacyPolicyDate": {
          "description": "Privacy policy accepted date",
          "type": "string"
        },
        "tncAgreementDate": {
          "description": "Terms and condition accepted date",
          "type": "string"
        },
        "headquartersCountry": {
          "description": "Country of the headquarters",
          "type": "string"
        },
        "email": {
          "description": "Email of the default user",
          "type": "string",
          "format": "email"
        },
        "password": {
          "description": "User password",
          "type": "string"
        },
        "firstName": {
          "description": "First name of the default user",
          "type": "string"
        },
        "lastName": {
          "description": "Last name  of the default user",
          "type": "string"
        },
        "mobile": {
          "description": "Mobile number",
          "type": "string"
        },
        "hostName": {
          "description": "Host name where the request came from",
          "type": "string",
          "format": "uri"
        },
        "ipAddress": {
          "description": "IP address where the request came from",
          "type": "string",
          "oneOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ]
        }
      },
      "required": [
        "platform",
        "name",
        "email",
        "privacyPolicyDate",
        "tncAgreementDate",
        "headquartersCountry",
        "hostName",
        "ipAddress"
      ],
      "additionalProperties": false
    },
    "createAccountResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/create-account-response+v1#",
      "title": "Account response",
      "description": "Account response schema",
      "type": "object",
      "properties": {
        "accountId": {
          "description": "Account id",
          "type": "string"
        },
        "bearerToken": {
          "description": "Bearer token",
          "type": "string"
        }
      },
      "required": [
        "accountId",
        "bearerToken"
      ],
      "additionalProperties": false
    },
    "createUserRequest": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/create-user-request+v1#",
      "title": "User",
      "description": "Create user schema",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        },
        "password": {
          "description": "Password",
          "type": "string"
        },
        "email": {
          "description": "Email of the user",
          "type": "string",
          "format": "email"
        },
        "bearerToken": {
          "description": "Bearer token of the account",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "lastName",
        "password",
        "email",
        "bearerToken"
      ],
      "additionalProperties": false
    },
    "createUserResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/create-user-response+v1#",
      "title": "User response",
      "description": "User response schema",
      "type": "object",
      "properties": {
        "userId": {
          "description": "User id",
          "type": "string"
        }
      },
      "required": [
        "userId"
      ],
      "additionalProperties": false
    },
    "deleteUserResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/delete-user-response+v1#",
      "title": "Delete user response",
      "description": "Delete user response schema",
      "type": "object",
      "properties": {
        "message": {
          "description": "Delete message",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "getAccountResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/get-account-response+v1#",
      "title": "Get account response",
      "description": "Get account response schema",
      "type": "object",
      "properties": {
        "id": {
          "description": "Account id",
          "type": "string"
        },
        "platform": {
          "description": "Platform",
          "type": "string"
        },
        "name": {
          "description": "name",
          "type": "string"
        },
        "privacyPolicyDate": {
          "description": "Privacy policy accepted date",
          "type": "string"
        },
        "tncAgreementDate": {
          "description": "Terms and condition accepted date",
          "type": "string"
        },
        "headquartersCountry": {
          "description": "Country of the headquarters",
          "type": "string"
        },
        "hostName": {
          "description": "Host name where the request came from",
          "type": "string",
          "format": "uri"
        },
        "ipAddress": {
          "description": "IP address where the request came from",
          "type": "string",
          "oneOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ]
        },
        "enterpriseBilling": {
          "description": "If enterprise billing or not",
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "platform",
        "name",
        "privacyPolicyDate",
        "tncAgreementDate",
        "headquartersCountry",
        "hostName",
        "ipAddress",
        "enterpriseBilling"
      ],
      "additionalProperties": false
    },
    "getAccountMarcoResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/get-account-marco-response+v1#",
      "type": "object",
      "properties": {
        "atoms": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "implements": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string"
                  }
                },
                "required": [
                  "task"
                ]
              },
              "workflow": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "title": {
                    "type": "object",
                    "properties": {
                      "messageKey": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "messageKey"
                    ]
                  },
                  "steps": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "form": {
                          "type": "object",
                          "properties": {
                            "controlSets": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "controls": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string"
                                        },
                                        "ref": {
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string"
                                        },
                                        "title": {
                                          "type": "object",
                                          "properties": {
                                            "messageKey": {
                                              "type": "string"
                                            }
                                          },
                                          "required": [
                                            "messageKey"
                                          ]
                                        },
                                        "validation": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "rule": {
                                                "type": "string"
                                              },
                                              "messages": {
                                                "type": "object",
                                                "properties": {
                                                  "required": {
                                                    "type": "object",
                                                    "properties": {
                                                      "messageKey": {
                                                        "type": "string"
                                                      }
                                                    },
                                                    "required": [
                                                      "messageKey"
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "required"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "rule",
                                              "messages"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "ref",
                                        "type",
                                        "title",
                                        "validation"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "id",
                                  "controls"
                                ]
                              }
                            },
                            "httpRequest": {
                              "type": "object",
                              "properties": {
                                "url": {
                                  "type": "string"
                                },
                                "method": {
                                  "type": "string"
                                },
                                "requestSchema": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "url",
                                "method",
                                "requestSchema"
                              ]
                            }
                          },
                          "required": [
                            "controlSets",
                            "httpRequest"
                          ]
                        },
                        "next": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "done": {
                                "type": "boolean"
                              },
                              "label": {
                                "type": "object",
                                "properties": {
                                  "messageKey": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "messageKey"
                                ]
                              }
                            },
                            "required": [
                              "done",
                              "label"
                            ]
                          }
                        }
                      },
                      "required": [
                        "id",
                        "type",
                        "form",
                        "next"
                      ]
                    }
                  }
                },
                "required": [
                  "id",
                  "title",
                  "steps"
                ]
              }
            },
            "required": [
              "type",
              "implements",
              "workflow"
            ]
          }
        }
      },
      "required": [
        "atoms"
      ]
    },
    "getUsersResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/get-users-response+v1#",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Account id",
            "type": "string"
          },
          "platform": {
            "description": "Platform",
            "type": "string"
          },
          "name": {
            "description": "name",
            "type": "string"
          },
          "privacyPolicyDate": {
            "description": "Privacy policy accepted date",
            "type": "string"
          },
          "tncAgreementDate": {
            "description": "Terms and condition accepted date",
            "type": "string"
          },
          "headquartersCountry": {
            "description": "Country of the headquarters",
            "type": "string"
          },
          "hostName": {
            "description": "Host name where the request came from",
            "type": "string",
            "format": "uri"
          },
          "ipAddress": {
            "description": "IP address where the request came from",
            "type": "string",
            "oneOf": [
              {
                "format": "ipv4"
              },
              {
                "format": "ipv6"
              }
            ]
          },
          "enterpriseBilling": {
            "description": "If enterprise billing or not",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "platform",
          "name",
          "privacyPolicyDate",
          "tncAgreementDate",
          "headquartersCountry",
          "hostName",
          "ipAddress",
          "enterpriseBilling"
        ],
        "additionalProperties": false
      }
    },
    "listAccountsResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/list-accounts-response+v1#",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "type": "string"
          },
          "password": {
            "description": "Password",
            "type": "string"
          },
          "email": {
            "description": "Email of the user",
            "type": "string",
            "format": "email"
          }
        },
        "required": [
          "id",
          "email",
          "firstName",
          "lastName"
        ],
        "additionalProperties": false
      }
    },
    "updateAccountRequest": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/update-account-request+v1",
      "title": "Account update",
      "description": "Account update schema",
      "type": "object",
      "properties": {
        "name": {
          "description": "name",
          "type": "string"
        },
        "privacyPolicyDate": {
          "description": "Privacy policy accepted date",
          "type": "string"
        },
        "tncAgreementDate": {
          "description": "Terms and condition accepted date",
          "type": "string"
        },
        "hostName": {
          "description": "Host name where the request came from",
          "type": "string",
          "format": "uri"
        },
        "ipAddress": {
          "description": "IP address where the request came from",
          "type": "string",
          "oneOf": [
            {
              "format": "ipv4"
            },
            {
              "format": "ipv6"
            }
          ]
        }
      },
      "anyOf": [
        {
          "required": [
            "name"
          ]
        },
        {
          "required": [
            "privacyPolicyDate"
          ]
        },
        {
          "required": [
            "tncAgreementDate"
          ]
        },
        {
          "required": [
            "hostName"
          ]
        },
        {
          "required": [
            "ipAddress"
          ]
        }
      ],
      "additionalProperties": false
    },
    "updateAccountResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/update-account-response+v1#",
      "title": "Update account response",
      "description": "Update account response schema",
      "type": "object",
      "properties": {
        "message": {
          "description": "Update account message",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "updateUserRequest": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/update-user-request+v1",
      "title": "User update",
      "description": "Update user schema",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name",
          "type": "string"
        },
        "lastName": {
          "description": "Last name",
          "type": "string"
        }
      },
      "anyOf": [
        {
          "required": [
            "firstName"
          ]
        },
        {
          "required": [
            "lastName"
          ]
        }
      ],
      "additionalProperties": false
    },
    "updateUserResponse": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "http://account.temando.com/schema/api/update-account-response+v1#",
      "title": "Update user response",
      "description": "Update user response schema",
      "type": "object",
      "properties": {
        "message": {
          "description": "Update user message",
          "type": "string"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "AddressV1": {
      "description": "This is the schema for representing addresses.",
      "type": "object",
      "required": [
        "countryCode"
      ],
      "properties": {
        "addressLine": {
          "description": "A street address and building number, newline delimited if required.",
          "type": "string"
        },
        "addressLine2": {
          "description": "Another street address and building number, newline delimited if required.",
          "type": "string"
        },
        "countryCode": {
          "description": "An ISO 3166-1 alpha-2 compliant two-letter country code.",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "postalCode": {
          "type": "string",
          "description": "The post or zip code of this address."
        },
        "locality": {
          "type": "string",
          "description": "The city or township of this address."
        },
        "administrativeArea": {
          "type": "string",
          "description": "The administrative area of this address, ie. state."
        },
        "longitude": {
          "type": "number",
          "description": "The longitude value of a geocoded address."
        },
        "latitude": {
          "type": "number",
          "description": "The latitude value of a geocoded address."
        }
      }
    },
    "ErrorV1": {
      "description": "Definition for error responses for this service, based on RFC 7807.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "uri",
          "description": "A URI reference that identifies the problem type."
        },
        "title": {
          "type": "string",
          "description": "A short, human-readable summary of the problem type."
        },
        "status": {
          "type": "integer",
          "description": "The HTTP status code generated by the origin server for this occurrence of the problem."
        },
        "detail": {
          "type": "string",
          "description": "A human-readable explanation specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "A URI reference that identifies the specific occurrence of the problem"
        },
        "errors": {
          "type": "array",
          "items": {
            "description": "Schema errors follow the same structure as those returned by AJV.",
            "type": "object",
            "properties": {
              "keyword": {
                "type": "string"
              },
              "dataPath": {
                "type": "string",
                "description": "The JSON Pointer reference to the property that was validated."
              },
              "schemaPath": {
                "type": "string",
                "description": "The JSON Pointer reference to the schema of the keyword that failed validation."
              },
              "params": {
                "type": "object"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "Container": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Merchant container name.",
          "type": "string"
        },
        "type": {
          "description": "The type of container.",
          "enum": [
            "Box",
            "Carton",
            "Create",
            "Cylinder",
            "Document Envelope",
            "Flat Pack",
            "Letter",
            "Pallet",
            "Parcel",
            "Satchel/Bag",
            "Other"
          ]
        },
        "outerDimensions": {
          "description": "Dimensions object describing the actual (outer) dimensions of the container, which are used for calculating freight cost",
          "$ref": "#/definitions/Dimensions"
        },
        "innerDimensions": {
          "description": "Dimensions object describing the available (inner) dimensions of the container, which are used to identify available space for packing",
          "$ref": "#/definitions/Dimensions"
        },
        "tareWeight": {
          "description": "The unladen weight of the container",
          "$ref": "#/definitions/Weight"
        },
        "maximumWeight": {
          "description": "The maximum weight that the container can hold",
          "$ref": "#/definitions/Weight"
        }
      },
      "required": [
        "name",
        "type",
        "outerDimensions",
        "innerDimensions",
        "tareWeight",
        "maximumWeight"
      ]
    },
    "Dimensions": {
      "type": "object",
      "properties": {
        "length": {
          "description": "The length of the container",
          "type": "number"
        },
        "width": {
          "description": "The width of the container",
          "type": "number"
        },
        "height": {
          "description": "The height of the container.",
          "type": "number"
        },
        "unitOfMeasurement": {
          "description": "The measurement unit of the dimensions.",
          "enum": [
            "cm",
            "centimeters",
            "in",
            "inches",
            "m",
            "meters",
            "mm",
            "millimeters",
            "ft",
            "feet"
          ]
        }
      },
      "required": [
        "length",
        "width",
        "height",
        "unitOfMeasurement"
      ]
    },
    "StoredContainer": {
      "type": "object",
      "properties": {
        "id": {
          "description": "GUID of the container.",
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "UNDEFINED"
        },
        {
          "required": [
            "id"
          ]
        }
      ]
    },
    "Weight": {
      "type": "object",
      "properties": {
        "weight": {
          "description": "The weight of the container.",
          "type": "number"
        },
        "unitOfMeasurement": {
          "description": "The measurement unit of the dimensions.",
          "enum": [
            "g",
            "grams",
            "oz",
            "ounces",
            "kg",
            "kilograms",
            "lb",
            "pounds",
            "ft",
            "feet"
          ]
        }
      },
      "required": [
        "weight",
        "unitOfMeasurement"
      ]
    },
    "ErrorInSchema": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "code": {
              "type": "integer"
            },
            "details": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "keyword": {
                    "type": "string"
                  },
                  "dataPath": {
                    "type": "string"
                  },
                  "schemaPath": {
                    "type": "string"
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "format": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "format"
                    ]
                  },
                  "message": {
                    "type": "string"
                  }
                },
                "required": [
                  "keyword",
                  "dataPath",
                  "schemaPath",
                  "params",
                  "message"
                ]
              }
            }
          },
          "required": [
            "description",
            "code",
            "details"
          ]
        }
      },
      "required": [
        "error"
      ]
    },
    "Location": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Merchant location name.",
          "type": "string"
        },
        "type": {
          "description": "The type of location.",
          "enum": [
            "Store",
            "Warehouse",
            "Drop Shipper",
            "Collection Point",
            "Click & Collect",
            "Headquarters"
          ]
        },
        "isDefault": {
          "description": "Indicates whether or not this is the default shipping origin",
          "type": "boolean"
        },
        "address": {
          "description": "Qualified address object describing a physical location",
          "$ref": "#/definitions/QualifiedAddress"
        },
        "contact": {
          "description": "The contact assigned to the location",
          "$ref": "UNDEFINED"
        },
        "uniqueId": {
          "description": "Merchant specified unique ID.",
          "type": "string"
        },
        "enabled": {
          "description": "Indicates whether or not this location is enabled",
          "type": "boolean",
          "default": true
        },
        "geodata": {
          "description": "Geographical data describing the location",
          "type": "object",
          "properties": {
            "zone": {
              "$ref": "UNDEFINED"
            }
          }
        }
      },
      "required": [
        "name",
        "type",
        "isDefault",
        "address"
      ]
    },
    "QualifiedAddress": {
      "type": "object",
      "properties": {
        "line1": {
          "description": "The first line of the address, usually the street/unit",
          "type": "string"
        },
        "line2": {
          "description": "The second line of the address",
          "type": "string"
        },
        "stateProvince": {
          "description": "State / Province",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal Code / Zip",
          "type": "string"
        },
        "country": {
          "description": "Country",
          "type": "string"
        },
        "latitude": {
          "description": "Latitude",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude",
          "type": "number"
        }
      },
      "required": [
        "line1",
        "stateProvince",
        "postalCode",
        "country"
      ]
    },
    "StoredLocation": {
      "type": "object",
      "properties": {
        "id": {
          "description": "GUID of the location.",
          "type": "string"
        }
      },
      "allOf": [
        {
          "$ref": "UNDEFINED"
        },
        {
          "required": [
            "id"
          ]
        }
      ]
    },
    "shipmentRequestV1": {
      "description": "The Shipment Creation Request Schema",
      "type": "object",
      "allOf": [
        {
          "description": "The Shipment Creation Request Schema",
          "type": "object",
          "required": [
            "origin",
            "destination",
            "pickupAt",
            "packages"
          ],
          "properties": {
            "customerReference": {
              "description": "A consistent identifier that represents a clients customer",
              "type": "string"
            },
            "origin": {
              "description": "This is the schema for representing addresses",
              "type": "object",
              "required": [
                "countryCode"
              ],
              "properties": {
                "isOrganisation": {
                  "type": "boolean"
                },
                "addressLine": {
                  "description": "A street address and building number, newline delimited if required",
                  "type": "string"
                },
                "addressLine2": {
                  "description": "Another street address and building number, newline delimited if required",
                  "type": "string"
                },
                "countryCode": {
                  "description": "An ISO 3166-1 alpha-2 compliant two-letter country code",
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                },
                "postalCode": {
                  "type": "string"
                },
                "inseeCode": {
                  "type": "string"
                },
                "pickupSiteCode": {
                  "type": "string"
                },
                "housingType": {
                  "type": "string"
                },
                "liftAvailable": {
                  "type": "boolean"
                },
                "apartmentNumber": {
                  "description": "apartmentNumber",
                  "type": "string"
                },
                "entryCode": {
                  "description": "entryCode",
                  "type": "string"
                },
                "buildingName": {
                  "type": "string"
                },
                "buildingNumber": {
                  "type": "string"
                },
                "floorNumber": {
                  "type": "string"
                },
                "languageCode": {
                  "type": "string"
                },
                "locality": {
                  "type": "string",
                  "description": "The city or township of this address"
                },
                "dependentLocality": {
                  "type": "string"
                },
                "administrativeArea": {
                  "type": "string",
                  "description": "The administrative area of this address ie: state"
                },
                "companyName": {
                  "type": "string"
                },
                "contactName": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 35
                },
                "contactEmail": {
                  "type": "string",
                  "format": "email"
                },
                "primaryPhoneNumber": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                },
                "secondaryPhoneNumber": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                },
                "faxNumber": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25
                },
                "tin": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25,
                  "description": "Tax Identification Number"
                }
              }
            },
            "destination": {
              "description": "This is the schema for representing addresses",
              "type": "object",
              "required": [
                "countryCode"
              ],
              "properties": {
                "isOrganisation": {
                  "type": "boolean"
                },
                "addressLine": {
                  "description": "A street address and building number, newline delimited if required",
                  "type": "string"
                },
                "addressLine2": {
                  "description": "Another street address and building number, newline delimited if required",
                  "type": "string"
                },
                "countryCode": {
                  "description": "An ISO 3166-1 alpha-2 compliant two-letter country code",
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 2
                },
                "postalCode": {
                  "type": "string"
                },
                "inseeCode": {
                  "type": "string"
                },
                "pickupSiteCode": {
                  "type": "string"
                },
                "housingType": {
                  "type": "string"
                },
                "liftAvailable": {
                  "type": "boolean"
                },
                "apartmentNumber": {
                  "description": "apartmentNumber",
                  "type": "string"
                },
                "entryCode": {
                  "description": "entryCode",
                  "type": "string"
                },
                "buildingName": {
                  "type": "string"
                },
                "buildingNumber": {
                  "type": "string"
                },
                "floorNumber": {
                  "type": "string"
                },
                "languageCode": {
                  "type": "string"
                },
                "locality": {
                  "type": "string",
                  "description": "The city or township of this address"
                },
                "dependentLocality": {
                  "type": "string"
                },
                "administrativeArea": {
                  "type": "string",
                  "description": "The administrative area of this address ie: state"
                },
                "companyName": {
                  "type": "string"
                },
                "contactName": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 35
                },
                "contactEmail": {
                  "type": "string",
                  "format": "email"
                },
                "primaryPhoneNumber": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                },
                "secondaryPhoneNumber": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                },
                "faxNumber": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25
                },
                "mobilePhoneNumber": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25
                },
                "tin": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 25,
                  "description": "Tax Identification Number"
                }
              }
            },
            "pickupAt": {
              "type": "string",
              "format": "date-time"
            },
            "expectedAt": {
              "type": "string",
              "format": "date-time"
            },
            "packages": {
              "type": "array",
              "minItems": 1,
              "items": {
                "description": "This is the schema for representing packages",
                "type": "object",
                "required": [
                  "id",
                  "grossWeight",
                  "dimensions"
                ],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "A reference identifier for the package"
                  },
                  "grossWeight": {
                    "description": "This is the schema for an representing weight",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "amount",
                      "unit"
                    ],
                    "properties": {
                      "amount": {
                        "description": "The amount of the weight unit",
                        "type": "number",
                        "minimum": 0
                      },
                      "unit": {
                        "description": "The weight unit the amount is",
                        "type": "string",
                        "enum": [
                          "g",
                          "gram",
                          "kg",
                          "kilogram",
                          "lb",
                          "pound",
                          "oz",
                          "ounce"
                        ]
                      }
                    }
                  },
                  "dimensions": {
                    "description": "This is the schema for representing dimensions",
                    "type": "object",
                    "additionalProperties": false,
                    "required": [
                      "length",
                      "width",
                      "height",
                      "unit"
                    ],
                    "properties": {
                      "length": {
                        "type": "number",
                        "minimum": 0
                      },
                      "width": {
                        "type": "number",
                        "minimum": 0
                      },
                      "height": {
                        "type": "number",
                        "minimum": 0
                      },
                      "unit": {
                        "description": "The length unit the dimension's lengths are in",
                        "type": "string",
                        "enum": [
                          "mm",
                          "millimeter",
                          "millimetre",
                          "cm",
                          "centimeter",
                          "centimetre",
                          "m",
                          "meter",
                          "metre",
                          "ft",
                          "foot",
                          "feet",
                          "in",
                          "inch",
                          "yd",
                          "yard"
                        ]
                      }
                    }
                  },
                  "packageType": {
                    "description": "Carrier specific package type",
                    "type": "string"
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "description": "This is the schema for representing item",
                      "type": "object",
                      "properties": {
                        "isFragile": {
                          "type": "boolean"
                        },
                        "quantity": {
                          "type": "number",
                          "minimum": 1,
                          "description": "Value of unit of quantity of this item"
                        },
                        "quantityUnit": {
                          "type": "string",
                          "description": "Unit of quantity (ie. kg, each, boxes etc)"
                        },
                        "totalMonetaryValue": {
                          "description": "This is the schema for an representing money",
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "amount": {
                              "description": "The amount of the currency",
                              "type": "number"
                            },
                            "currency": {
                              "description": "The currency the money amount is",
                              "type": "string",
                              "maxLength": 3,
                              "minLength": 3
                            }
                          },
                          "required": [
                            "amount",
                            "currency"
                          ]
                        },
                        "sku": {
                          "description": "Stock keeping unit (SKU) to identify item",
                          "type": "string"
                        },
                        "description": {
                          "description": "Description of item for export details",
                          "type": "string"
                        },
                        "carrierMerchandiseCategory": {
                          "type": "string",
                          "description": "Item category for carrier, required for RC ?? :("
                        },
                        "scheduleBinfo": {
                          "type": "string",
                          "description": "Schedule B Export Code for Package",
                          "minLength": 0,
                          "maxLength": 15
                        },
                        "eccn": {
                          "type": "string",
                          "description": "Export Control Classification Number (ECCN)",
                          "minLength": 0,
                          "maxLength": 5
                        },
                        "hsCode": {
                          "type": "string",
                          "description": "Harmonized Commodity Description and Coding System",
                          "minLength": 2,
                          "maxLength": 10
                        },
                        "countryOfManufacture": {
                          "description": "An ISO 3166-1 alpha-2 compliant two-letter country code",
                          "type": "string",
                          "minLength": 2,
                          "maxLength": 2
                        },
                        "countryOfOrigin": {
                          "description": "An ISO 3166-1 alpha-2 compliant two-letter country code",
                          "type": "string",
                          "minLength": 2,
                          "maxLength": 2
                        },
                        "grossWeight": {
                          "description": "This is the schema for an representing weight",
                          "type": "object",
                          "additionalProperties": false,
                          "required": [
                            "amount",
                            "unit"
                          ],
                          "properties": {
                            "amount": {
                              "description": "The amount of the weight unit",
                              "type": "number",
                              "minimum": 0
                            },
                            "unit": {
                              "description": "The weight unit the amount is",
                              "type": "string",
                              "enum": [
                                "g",
                                "gram",
                                "kg",
                                "kilogram",
                                "lb",
                                "pound",
                                "oz",
                                "ounce"
                              ]
                            }
                          }
                        },
                        "netCost": {
                          "type": "string",
                          "enum": [
                            "Y",
                            "N"
                          ],
                          "description": "Net Cost for NAFTA and COO"
                        },
                        "preferenceCriterion": {
                          "type": "string",
                          "description": "Preference Criteria for NAFTA and COO",
                          "enum": [
                            "A",
                            "B",
                            "C",
                            "D",
                            "E",
                            "F"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    },
    "shipmentResponseV1": {
      "description": "The Shipment Creation Response Schema",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        {
          "$ref": "http://shipment-service.schemas.ah.temando.io/shipment-object+v1.schema.json#"
        }
      ]
    },
    "shipmentQuoteResponse": {
      "description": "Describes the quotes returned by carrier services for a given shipment request.",
      "type": "object",
      "required": [
        "quotes"
      ],
      "properties": {
        "quotes": {
          "type": "object",
          "properties": {
            "eligible": {
              "type": "array",
              "minItems": 0,
              "items": {
                "type": "object",
                "required": [
                  "carrier",
                  "integrationId",
                  "integrationServiceId",
                  "serviceName",
                  "shippingTaxInclusiveCharge",
                  "pricedAt"
                ],
                "properties": {
                  "carrier": {
                    "description": "The unique name of the carrier",
                    "type": "string"
                  },
                  "integrationId": {
                    "description": "The unique id of the integration",
                    "type": "string"
                  },
                  "integrationServiceId": {
                    "description": "A consistent identifier within the integration that represents a unique carrier service",
                    "type": "string"
                  },
                  "serviceName": {
                    "description": "A human understandable reference that represents a carrier service",
                    "type": "string"
                  },
                  "estimatedTransitPeriod": {
                    "description": "A reference that represents the estimated travel time of the quote",
                    "type": "object",
                    "required": [
                      "minimum",
                      "maximum"
                    ],
                    "properties": {
                      "minimum": {
                        "type": "string",
                        "description": "An ISO 8601 duration representing the minimum travel time",
                        "pattern": "^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$"
                      },
                      "maximum": {
                        "type": "string",
                        "description": "An ISO 8601 duration representing the maximum travel time",
                        "pattern": "^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$"
                      }
                    }
                  },
                  "shippingTaxInclusiveCharge": {
                    "description": "This is the schema for an representing money",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "amount": {
                        "description": "The amount of the currency",
                        "type": "number"
                      },
                      "currency": {
                        "description": "The currency the money amount is",
                        "type": "string",
                        "maxLength": 3,
                        "minLength": 3
                      }
                    },
                    "required": [
                      "amount",
                      "currency"
                    ]
                  },
                  "pricedAt": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            },
            "ineligible": {
              "type": "array",
              "minItems": 0,
              "items": {
                "type": "object",
                "required": [
                  "integrationId",
                  "carrierName",
                  "reasons"
                ],
                "properties": {
                  "integrationId": {
                    "description": "The unique id of the integration",
                    "type": "string"
                  },
                  "integrationServiceId": {
                    "description": "A consistent identifier within the integration that represents a unique carrier service",
                    "type": "string"
                  },
                  "serviceName": {
                    "description": "A human understandable reference that represents a carrier service",
                    "type": "string"
                  },
                  "carrierName": {
                    "description": "A human understandable reference that represents a carrier",
                    "type": "string"
                  },
                  "reasons": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1
                  }
                }
              }
            },
            "filtered": {
              "type": "array",
              "minItems": 0,
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "required": [
                      "carrier",
                      "integrationId",
                      "integrationServiceId",
                      "serviceName",
                      "shippingTaxInclusiveCharge",
                      "pricedAt"
                    ],
                    "properties": {
                      "carrier": {
                        "description": "The unique name of the carrier",
                        "type": "string"
                      },
                      "integrationId": {
                        "description": "The unique id of the integration",
                        "type": "string"
                      },
                      "integrationServiceId": {
                        "description": "A consistent identifier within the integration that represents a unique carrier service",
                        "type": "string"
                      },
                      "serviceName": {
                        "description": "A human understandable reference that represents a carrier service",
                        "type": "string"
                      },
                      "estimatedTransitPeriod": {
                        "description": "A reference that represents the estimated travel time of the quote",
                        "type": "object",
                        "required": [
                          "minimum",
                          "maximum"
                        ],
                        "properties": {
                          "minimum": {
                            "type": "string",
                            "description": "An ISO 8601 duration representing the minimum travel time",
                            "pattern": "^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$"
                          },
                          "maximum": {
                            "type": "string",
                            "description": "An ISO 8601 duration representing the maximum travel time",
                            "pattern": "^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$"
                          }
                        }
                      },
                      "shippingTaxInclusiveCharge": {
                        "description": "This is the schema for an representing money",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "amount": {
                            "description": "The amount of the currency",
                            "type": "number"
                          },
                          "currency": {
                            "description": "The currency the money amount is",
                            "type": "string",
                            "maxLength": 3,
                            "minLength": 3
                          }
                        },
                        "required": [
                          "amount",
                          "currency"
                        ]
                      },
                      "pricedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "required": [
                      "filterName"
                    ],
                    "properties": {
                      "filterName": {
                        "description": "The name of the filter matching the quote",
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "errors": {
          "type": "array",
          "minItems": 0,
          "items": {
            "type": "object",
            "properties": {
              "serviceName": {
                "description": "The name of the carrier service that encountered an error",
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "errors": {
                "type": "array"
              }
            },
            "anyOf": [
              {
                "required": [
                  "errors"
                ]
              },
              {
                "required": [
                  "message"
                ]
              }
            ]
          }
        }
      }
    },
    "shipmentFulfillRequestV1": {
      "description": "The Shipment Fulfill Request Schema",
      "type": "object",
      "required": [
        "type"
      ],
      "additionalProperties": false,
      "properties": {
        "type": {
          "description": "Type of fulfillment being chosen for this shipment",
          "$ref": "http://shipment-service.schemas.ah.temando.io/generic/fulfillment-type+v1.schema.json#"
        },
        "carrierBooking": {
          "description": "The carrier booking information object"
        }
      },
      "oneOf": [
        {
          "type": "object",
          "required": [
            "carrierBooking"
          ],
          "properties": {
            "carrierBooking": {
              "description": "The carrier booking information object",
              "type": "object",
              "additionalProperties": false,
              "required": [
                "integrationId",
                "integrationServiceId"
              ],
              "properties": {
                "integrationId": {
                  "description": "The identifier of the integration to you want to communicate with",
                  "type": "string"
                },
                "integrationServiceId": {
                  "description": "A consistent identifier that represents a unique carrier service",
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "shipmentFulfillResponseV1": {
      "description": "The Shipment Fulfill Response Schema",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "A simple status to denote the result of the fulfillment request",
          "type": "string",
          "enum": [
            "ERROR",
            "OK"
          ]
        }
      },
      "oneOf": [
        {
          "description": "A fulfillment error response object",
          "type": "object",
          "required": [
            "errors"
          ],
          "properties": {
            "errors": {
              "type": "array",
              "items": {
                "type": [
                  "string",
                  "array",
                  "object"
                ]
              },
              "minItems": 1
            }
          }
        },
        {
          "type": "object",
          "required": [
            "response"
          ],
          "properties": {
            "response": {
              "description": "A Fulfillment Response object",
              "type": "object",
              "required": [
                "type"
              ],
              "additionalProperties": false,
              "properties": {
                "type": {
                  "description": "Type of fulfillment being chosen for this shipment",
                  "$ref": "http://shipment-service.schemas.ah.temando.io/generic/fulfillment-type+v1.schema.json#"
                },
                "carrierBooking": {
                  "type": "object"
                }
              },
              "oneOf": [
                {
                  "type": "object",
                  "required": [
                    "carrierBooking"
                  ],
                  "properties": {
                    "carrierBooking": {
                      "description": "The carrier booking information object",
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "integrationId",
                        "integrationServiceId",
                        "shippingTaxInclusiveCharge",
                        "bookedAt",
                        "bookingReference",
                        "trackingReference",
                        "serviceName",
                        "documentation",
                        "packages"
                      ],
                      "properties": {
                        "integrationId": {
                          "description": "The identifier of the integration to you want to communicate with",
                          "type": "string"
                        },
                        "integrationServiceId": {
                          "description": "A consistent identifier that represents a unique carrier service",
                          "type": "string"
                        },
                        "shippingTaxInclusiveCharge": {
                          "$ref": "http://shipment-service.schemas.ah.temando.io/generic/money+v1.schema.json#"
                        },
                        "bookedAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "bookingReference": {
                          "type": "string"
                        },
                        "trackingReference": {
                          "type": "string"
                        },
                        "serviceName": {
                          "description": "A human understandable reference that represents a carrier service",
                          "type": "string"
                        },
                        "carrierName": {
                          "description": "A human understandable reference that represents a carrier",
                          "type": "string"
                        },
                        "carrierSortCode": {
                          "description": "An identifier used by a carrier to determinine shipment sorting",
                          "type": "string"
                        },
                        "documentation": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "$ref": "http://shipment-service.schemas.ah.temando.io/generic/documentation+v1.schema.json#"
                          }
                        },
                        "packages": {
                          "type": "array",
                          "minItems": 1,
                          "items": {
                            "allOf": [
                              {
                                "$ref": "http://shipment-service.schemas.ah.temando.io/generic/package+v2.schema.json#"
                              }
                            ],
                            "properties": {
                              "documentation": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                  "$ref": "http://shipment-service.schemas.ah.temando.io/generic/documentation+v1.schema.json#"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "errorV1": {
      "description": "Definition for error responses for this service, based on RFC 7807.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "format": "uri",
          "description": "A URI reference that identifies the problem type."
        },
        "title": {
          "type": "string",
          "description": "A short, human-readable summary of the problem type."
        },
        "status": {
          "type": "integer",
          "description": "The HTTP status code generated by the origin server for this occurrence of the problem."
        },
        "detail": {
          "type": "string",
          "description": "A human-readable explanation specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "A URI reference that identifies the specific occurrence of the problem"
        },
        "errors": {
          "type": "array",
          "items": {
            "description": "Schema errors follow the same structure as those returned by AJV.",
            "type": "object",
            "properties": {
              "keyword": {
                "type": "string"
              },
              "dataPath": {
                "type": "string",
                "description": "The JSON Pointer reference to the property that was validated."
              },
              "schemaPath": {
                "type": "string",
                "description": "The JSON Pointer reference to the schema of the keyword that failed validation."
              },
              "params": {
                "type": "object"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "orderV1": {
      "description": "Schema to represent order",
      "type": "object",
      "required": [
        "createdAt",
        "orderedAt",
        "customer",
        "deliverTo",
        "items"
      ],
      "properties": {
        "createdAt": {
          "description": "The date and time this order was first created, represented as defined by RFC 3339, Section 5.6",
          "type": "string",
          "format": "date-time"
        },
        "lastModifiedAt": {
          "description": "The date and time this order was last modified, represented as defined by RFC 3339, Section 5.6",
          "type": "string",
          "format": "date-time"
        },
        "orderedAt": {
          "description": "The date and time the order was placed, represented as defined by RFC 3339, Section 5.6",
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "object",
          "required": [
            "name",
            "reference"
          ],
          "properties": {
            "name": {
              "description": "Order source, ie Magento, Shopify",
              "type": "string"
            },
            "reference": {
              "description": "Order reference from a shopping cart, ie. Magento order no.",
              "type": "string"
            }
          }
        },
        "customer": {
          "type": "object",
          "required": [
            "contact"
          ],
          "properties": {
            "contact": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "companyName": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "phone": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                }
              }
            }
          }
        },
        "deliverTo": {
          "type": "object",
          "required": [
            "contact",
            "address"
          ],
          "properties": {
            "expectedAt": {
              "description": "The date and time the order is expected to be delivered, represented as defined by RFC 3339, Section 5.6",
              "type": "string",
              "format": "date-time"
            },
            "contact": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "companyName": {
                  "type": "string"
                },
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string",
                  "format": "email"
                },
                "phone": {
                  "type": "string",
                  "minLength": 2,
                  "maxLength": 25
                }
              }
            },
            "address": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "line": {
                  "description": "Line of the address",
                  "type": "array"
                },
                "stateProvince": {
                  "description": "State / Province",
                  "type": "string"
                },
                "postalCode": {
                  "description": "Postal Code / Zip",
                  "type": "string"
                },
                "country": {
                  "description": "Country",
                  "type": "string"
                },
                "options": {
                  "description": "address options",
                  "type": "object"
                }
              }
            }
          }
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "sku": {
                "type": "string",
                "maxLength": 100
              },
              "category": {
                "type": "string",
                "maxLength": 100
              },
              "description": {
                "type": "string",
                "maxLength": 500
              },
              "quantity": {
                "type": "number"
              },
              "dimension": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "length": {
                    "type": "number"
                  },
                  "width": {
                    "type": "number"
                  },
                  "height": {
                    "type": "number"
                  },
                  "unit": {
                    "enum": [
                      "cm",
                      "centimeters",
                      "in",
                      "inches",
                      "m",
                      "meters",
                      "mm",
                      "millimeters",
                      "ft",
                      "feet"
                    ]
                  }
                },
                "required": [
                  "length",
                  "width",
                  "height",
                  "unit"
                ]
              },
              "grossWeight": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "value": {
                    "type": "number"
                  },
                  "unit": {
                    "enum": [
                      "g",
                      "grams",
                      "oz",
                      "ounces",
                      "kg",
                      "kilograms",
                      "lb",
                      "pounds"
                    ]
                  }
                },
                "required": [
                  "value",
                  "unit"
                ]
              },
              "price": {
                "description": "Representing money",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "amount": {
                    "description": "The amount of the currency",
                    "type": "number"
                  },
                  "currency": {
                    "description": "The currency the money amount is",
                    "type": "string",
                    "maxLength": 3,
                    "minLength": 3
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ]
              },
              "export": {
                "type": "object"
              }
            }
          }
        },
        "total": {
          "description": "Representing money",
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "amount": {
              "description": "The amount of the currency",
              "type": "number"
            },
            "currency": {
              "description": "The currency the money amount is",
              "type": "string",
              "maxLength": 3,
              "minLength": 3
            }
          },
          "required": [
            "amount",
            "currency"
          ]
        }
      }
    },
    "Product": {
      "properties": {
        "$schema": {
          "type": "string"
        },
        "merchantProductId": {
          "description": "The product unique identifier, provided by the merchant",
          "type": "string",
          "maxLength": 100
        },
        "name": {
          "type": "string",
          "maxLength": 100
        },
        "sku": {
          "type": "string",
          "maxLength": 100
        },
        "description": {
          "type": "string",
          "maxLength": 500
        },
        "unitOfMeasure": {
          "description": "The unit of measure that describes the product. Should be a value from Measures column at https://www.ups.com/worldshiphelp/WS12/ENU/AppHelp/Codes/Unit_of_Measure_Codes_for_Invoices.htm",
          "type": "string",
          "enum": [
            "Bag",
            "Barrel",
            "Bolt",
            "Box",
            "Bunch",
            "Bundle",
            "Butt",
            "Canister",
            "Carton",
            "Case",
            "Centimeter",
            "Container",
            "Crate",
            "Cylinder",
            "Dozen",
            "Each",
            "Envelope",
            "Foot",
            "Kilogram",
            "Kilograms",
            "Liter",
            "Meter",
            "Number",
            "Package",
            "Packet",
            "Pair",
            "Pairs",
            "Pallet",
            "Piece",
            "Pieces",
            "Pound",
            "Proof Liter",
            "Roll",
            "Set",
            "Square Meter",
            "Square Yard",
            "Tube",
            "Yard"
          ]
        },
        "category": {
          "type": "string"
        },
        "isFragile": {
          "type": "boolean",
          "default": false
        },
        "isDownloadable": {
          "type": "boolean",
          "default": false
        },
        "isPrePackaged": {
          "description": "Whether the product has its own package",
          "type": "boolean",
          "default": false
        },
        "canRotateVertical": {
          "description": "Whether the product can be rotated vertically",
          "type": "boolean",
          "default": true
        },
        "countryOfOrigin": {
          "description": "A two letter country code as per ISO 3166-1",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "countryOfManufacture": {
          "description": "A two letter country code as per ISO 3166-1",
          "type": "string",
          "minLength": 2,
          "maxLength": 2
        },
        "dimensions": {
          "properties": {
            "length": {
              "type": "number"
            },
            "width": {
              "type": "number"
            },
            "height": {
              "type": "number"
            },
            "unitOfMeasurement": {
              "enum": [
                "cm",
                "centimeters",
                "in",
                "inches",
                "m",
                "meters",
                "mm",
                "millimeters",
                "ft",
                "feet"
              ]
            }
          },
          "required": [
            "length",
            "width",
            "height",
            "unitOfMeasurement"
          ]
        },
        "weight": {
          "properties": {
            "value": {
              "type": "number"
            },
            "unitOfMeasurement": {
              "enum": [
                "g",
                "grams",
                "oz",
                "ounces",
                "kg",
                "kilograms",
                "lb",
                "pounds"
              ]
            }
          },
          "required": [
            "value",
            "unitOfMeasurement"
          ]
        },
        "customAttributes": {
          "default": [],
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "key",
              "value"
            ],
            "properties": {
              "key": {
                "type": "string",
                "pattern": "^[a-zA-Z0-9_-]+$"
              },
              "value": {
                "type": [
                  "number",
                  "integer",
                  "string",
                  "boolean"
                ]
              }
            },
            "additionalProperties": false
          }
        }
      },
      "required": [
        "merchantProductId",
        "name"
      ]
    },
    "StoredProduct": {
      "properties": {
        "id": {
          "description": "GUID of the product.",
          "type": "string"
        }
      },
      "allOf": [
        {
          "properties": {
            "$schema": {
              "type": "string"
            },
            "merchantProductId": {
              "description": "The product unique identifier, provided by the merchant",
              "type": "string",
              "maxLength": 100
            },
            "name": {
              "type": "string",
              "maxLength": 100
            },
            "sku": {
              "type": "string",
              "maxLength": 100
            },
            "description": {
              "type": "string",
              "maxLength": 500
            },
            "unitOfMeasure": {
              "description": "The unit of measure that describes the product. Should be a value from Measures column at https://www.ups.com/worldshiphelp/WS12/ENU/AppHelp/Codes/Unit_of_Measure_Codes_for_Invoices.htm",
              "type": "string",
              "enum": [
                "Bag",
                "Barrel",
                "Bolt",
                "Box",
                "Bunch",
                "Bundle",
                "Butt",
                "Canister",
                "Carton",
                "Case",
                "Centimeter",
                "Container",
                "Crate",
                "Cylinder",
                "Dozen",
                "Each",
                "Envelope",
                "Foot",
                "Kilogram",
                "Kilograms",
                "Liter",
                "Meter",
                "Number",
                "Package",
                "Packet",
                "Pair",
                "Pairs",
                "Pallet",
                "Piece",
                "Pieces",
                "Pound",
                "Proof Liter",
                "Roll",
                "Set",
                "Square Meter",
                "Square Yard",
                "Tube",
                "Yard"
              ]
            },
            "category": {
              "type": "string"
            },
            "isFragile": {
              "type": "boolean",
              "default": false
            },
            "isDownloadable": {
              "type": "boolean",
              "default": false
            },
            "isPrePackaged": {
              "description": "Whether the product has its own package",
              "type": "boolean",
              "default": false
            },
            "canRotateVertical": {
              "description": "Whether the product can be rotated vertically",
              "type": "boolean",
              "default": true
            },
            "countryOfOrigin": {
              "description": "A two letter country code as per ISO 3166-1",
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "countryOfManufacture": {
              "description": "A two letter country code as per ISO 3166-1",
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "dimensions": {
              "properties": {
                "length": {
                  "type": "number"
                },
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "unitOfMeasurement": {
                  "enum": [
                    "cm",
                    "centimeters",
                    "in",
                    "inches",
                    "m",
                    "meters",
                    "mm",
                    "millimeters",
                    "ft",
                    "feet"
                  ]
                }
              },
              "required": [
                "length",
                "width",
                "height",
                "unitOfMeasurement"
              ]
            },
            "weight": {
              "properties": {
                "value": {
                  "type": "number"
                },
                "unitOfMeasurement": {
                  "enum": [
                    "g",
                    "grams",
                    "oz",
                    "ounces",
                    "kg",
                    "kilograms",
                    "lb",
                    "pounds"
                  ]
                }
              },
              "required": [
                "value",
                "unitOfMeasurement"
              ]
            },
            "customAttributes": {
              "default": [],
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "key",
                  "value"
                ],
                "properties": {
                  "key": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]+$"
                  },
                  "value": {
                    "type": [
                      "number",
                      "integer",
                      "string",
                      "boolean"
                    ]
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": [
            "merchantProductId",
            "name"
          ]
        },
        {
          "required": [
            "id"
          ]
        }
      ]
    },
    "AuthRequest": {
      "id": false,
      "type": "object",
      "properties": {
        "bearerToken": {
          "type": [
            "string"
          ]
        },
        "accountId": {
          "type": [
            "string"
          ]
        },
        "email": {
          "type": [
            "string"
          ]
        },
        "password": {
          "type": [
            "string"
          ]
        },
        "scope": {
          "type": [
            "string"
          ]
        }
      },
      "anyOf": [
        {
          "required": [
            "bearerToken",
            "accountId"
          ]
        },
        {
          "required": [
            "email",
            "password"
          ]
        }
      ]
    },
    "SessionResponse": {
      "id": false,
      "description": "Session response payload",
      "type": "object",
      "properties": {
        "session": {
          "description": "Session and identity token.",
          "required": true,
          "type": "string"
        },
        "expiry": {
          "description": "Epoch for session expiry time",
          "required": true,
          "type": "integer"
        }
      },
      "required": [
        "session",
        "expiry"
      ]
    }
  }
}
