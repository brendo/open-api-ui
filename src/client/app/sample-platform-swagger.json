{
    "swagger": "2.0",
    "info": {
        "title": "Temando API",
        "description": "Providing consumers with more choice and lowering the cost of shipping.\n\nThis documentation has been created from the following services:\n\n _v1.0.0 Temando Account Service:_ Temando Account Service _v1.0.0 Temando Address Lookup and Verification Service:_ Provides the functionality to verify addresses and to auto-complete partial address information. _v1.0.0 Temando Containers API:_ Providing consumers with more choice and lowering the cost of shipping. _v1.0.0 Temando Locations API:_ Providing consumers with more choice and lowering the cost of shipping.",
        "version": "1.0.0"
    },
    "host": "api.temando.com",
    "schemes": [
        "https"
    ],
    "basePath": "/v1",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/accounts": {
            "post": {
                "summary": "Register client account configuration data",
                "description": "Register client account configuration data",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account registered successfully.",
                        "schema": {
                            "$ref": "#/definitions/createAccountResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get a list of registered accounts",
                "description": "Get a list of registered accounts",
                "tags": [
                    "AccountService"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "list of registered accounts to be returned",
                        "schema": {
                            "$ref": "#/definitions/listAccountsResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{id}": {
            "get": {
                "summary": "Get account configuration data",
                "description": "Get account configuration data",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "a given account configuration data",
                        "schema": {
                            "$ref": "#/definitions/getAccountResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update account configuration data",
                "description": "Update account configuration data",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    },
                    {
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "a given account configuration data",
                        "schema": {
                            "$ref": "#/definitions/updateAccountResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/marco": {
            "get": {
                "summary": "Get account marco",
                "description": "Get account marco",
                "tags": [
                    "AccountService"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "account marco response",
                        "schema": {
                            "$ref": "#/definitions/getAccountMarcoResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{id}/users": {
            "post": {
                "summary": "Create a user under the given account",
                "description": "Create a user under the given account",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    },
                    {
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/createUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created successfully.",
                        "schema": {
                            "$ref": "#/definitions/createUserResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get all users of a given account",
                "description": "Get all users of a given account",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "get users response",
                        "schema": {
                            "$ref": "#/definitions/getUserResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            }
        },
        "/accounts/{id}/users/{userId}": {
            "get": {
                "summary": "Get user",
                "description": "Get user",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "get user response",
                        "schema": {
                            "$ref": "#/definitions/getUserResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user",
                "description": "Update user",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true
                    },
                    {
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/updateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/updateUserResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete user",
                "description": "Delete user",
                "tags": [
                    "AccountService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Id of the account",
                        "required": true
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deleted successfully.",
                        "schema": {
                            "$ref": "#/definitions/deleteUserResponse"
                        }
                    },
                    "errors": {
                        "401": {
                            "description": "Authentication failed.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "403": {
                            "description": "Expired credentials.",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        },
                        "default": {
                            "description": "Unexpected error",
                            "schema": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    }
                }
            }
        },
        "/address/verification": {
            "post": {
                "summary": "Perform address verification.",
                "tags": [
                    "AddressVerificationService"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressV1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address was able to verify",
                        "schema": {
                            "$ref": "#/definitions/AddressV1"
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    },
                    "500": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    }
                }
            }
        },
        "/address/completion": {
            "post": {
                "summary": "Perform partial address completion.",
                "tags": [
                    "AddressVerificationService"
                ],
                "parameters": [
                    {
                        "name": "address",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AddressV1"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of addresses that match address partial",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AddressV1"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    },
                    "500": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorV1"
                        }
                    }
                }
            }
        },
        "/containers/marco": {
            "get": {
                "summary": "Returns the marco for building a new Container",
                "description": "Returns the marco for building a new Container",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns the marco template for creating a Container."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/containers": {
            "post": {
                "summary": "Create a container object in the account.",
                "description": "Create a container object in the account.",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [
                    {
                        "name": "container",
                        "in": "body",
                        "description": "The container to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Container"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly created container with unique ID.",
                        "schema": {
                            "$ref": "#/definitions/StoredContainer"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "The request schema did not meet the specification.",
                        "schema": {
                            "$ref": "#/definitions/ErrorInSchema"
                        }
                    }
                }
            },
            "get": {
                "summary": "Get list of containers in the account document.",
                "description": "Get list of containers in the account document.",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Offset for the returned array of records",
                        "type": "number",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit for the returned array of records.",
                        "type": "number",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all of the containers defined.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StoredContainer"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/containers/{id}": {
            "get": {
                "summary": "Get container from account document.",
                "description": "Get container from account document.",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of container to fetch",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the container specified by ID parameter",
                        "schema": {
                            "$ref": "#/definitions/StoredContainer"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update container.",
                "description": "Update container in account document.",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of container to update",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "container",
                        "in": "body",
                        "description": "The new data to store against the container",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StoredContainer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated the container."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "The request schema did not meet the specification.",
                        "schema": {
                            "$ref": "#/definitions/ErrorInSchema"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove containers.",
                "description": "Remove container from account document.",
                "tags": [
                    "ContainerService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of container to remove",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully updated the container."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Container is being used by another service.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/containers/{id}/verification": {},
        "/locations/marco": {
            "get": {
                "summary": "Returns the bluprint for building a new Location",
                "description": "Returns the bluprint for building a new Location",
                "tags": [
                    "LocationService"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Returns the marco template for creating a Location."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/locations": {
            "post": {
                "summary": "Create a location object in the account.",
                "description": "Create a location object in the account.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "location",
                        "in": "body",
                        "description": "The location to create",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Location"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly created location with unique ID.",
                        "schema": {
                            "$ref": "#/definitions/StoredLocation"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "The request schema did not meet the specification.",
                        "schema": {
                            "$ref": "#/definitions/ErrorInSchema"
                        }
                    }
                }
            },
            "get": {
                "summary": "Get list of locations in the account document.",
                "description": "Get list of locations in the account document.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "in": "query",
                        "description": "Offset for the returned array of records",
                        "type": "number",
                        "required": false
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Limit for the returned array of records.",
                        "type": "number",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all of the locations defined.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/StoredLocation"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "summary": "Get location from account document.",
                "description": "Get location from account document.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of location to fetch",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return the location specified by ID parameter",
                        "schema": {
                            "$ref": "#/definitions/StoredLocation"
                        }
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update location.",
                "description": "Update location in account document.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of location to update",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "location",
                        "in": "body",
                        "description": "The new data to store against the location",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StoredLocation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated the location."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "422": {
                        "description": "The request schema did not meet the specification.",
                        "schema": {
                            "$ref": "#/definitions/ErrorInSchema"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove locations.",
                "description": "Remove location from account document.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of location to remove",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the location."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "412": {
                        "description": "Location is being used by another service.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/locations/{id}/verification": {
            "get": {
                "summary": "Perform an algorithmic address verification.",
                "description": "V1 of this service may push through to an external service.",
                "tags": [
                    "LocationService"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "id of location to verify",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns a pass/fail verification and updates the location record."
                    },
                    "401": {
                        "description": "Authentication failed.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "403": {
                        "description": "Expired credentials.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "createAccountRequest": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/create-account-request+v1#",
            "title": "Account",
            "description": "Account registration schema",
            "type": "object",
            "properties": {
                "platform": {
                    "description": "Platform",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "privacyPolicyDate": {
                    "description": "Privacy policy accepted date",
                    "type": "string"
                },
                "tncAgreementDate": {
                    "description": "Terms and condition accepted date",
                    "type": "string"
                },
                "headquartersCountry": {
                    "description": "Country of the headquarters",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the default user",
                    "type": "string",
                    "format": "email"
                },
                "password": {
                    "description": "User password",
                    "type": "string"
                },
                "firstName": {
                    "description": "First name of the default user",
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name  of the default user",
                    "type": "string"
                },
                "mobile": {
                    "description": "Mobile number",
                    "type": "string"
                },
                "hostName": {
                    "description": "Host name where the request came from",
                    "type": "string",
                    "format": "uri"
                },
                "ipAddress": {
                    "description": "IP address where the request came from",
                    "type": "string",
                    "oneOf": [
                        {
                            "format": "ipv4"
                        },
                        {
                            "format": "ipv6"
                        }
                    ]
                }
            },
            "anyOf": [
                {
                    "required": [
                        "platform"
                    ]
                },
                {
                    "required": [
                        "name"
                    ]
                }
            ],
            "required": [
                "email",
                "privacyPolicyDate",
                "tncAgreementDate",
                "headquartersCountry",
                "hostName",
                "ipAddress"
            ],
            "additionalProperties": false
        },
        "createAccountResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/create-account-response+v1#",
            "title": "Account response",
            "description": "Account response schema",
            "type": "object",
            "properties": {
                "accountId": {
                    "description": "Account id",
                    "type": "string"
                },
                "bearerToken": {
                    "description": "Bearer token",
                    "type": "string"
                }
            },
            "required": [
                "accountId",
                "bearerToken"
            ],
            "additionalProperties": false
        },
        "createUserRequest": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/create-user-request+v1#",
            "title": "User",
            "description": "Create user schema",
            "type": "object",
            "properties": {
                "firstName": {
                    "description": "First name",
                    "type": "string"
                },
                "lastName": {
                    "description": "Last name",
                    "type": "string"
                },
                "password": {
                    "description": "Password",
                    "type": "string"
                },
                "email": {
                    "description": "Email of the user",
                    "type": "string",
                    "format": "email"
                }
            },
            "required": [
                "firstName",
                "lastName",
                "password",
                "email"
            ],
            "additionalProperties": false
        },
        "createUserResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/create-user-response+v1#",
            "title": "User response",
            "description": "User response schema",
            "type": "object",
            "properties": {
                "userId": {
                    "description": "User id",
                    "type": "string"
                }
            },
            "required": [
                "userId"
            ],
            "additionalProperties": false
        },
        "deleteUserResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/delete-user-response+v1#",
            "title": "Delete user response",
            "description": "Delete user response schema",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Delete message",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ],
            "additionalProperties": false
        },
        "getAccountResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/get-account-response+v1#",
            "title": "Get account response",
            "description": "Get account response schema",
            "type": "object",
            "properties": {
                "id": {
                    "description": "Account id",
                    "type": "string"
                },
                "platform": {
                    "description": "Platform",
                    "type": "string"
                },
                "name": {
                    "description": "name",
                    "type": "string"
                },
                "privacyPolicyDate": {
                    "description": "Privacy policy accepted date",
                    "type": "string"
                },
                "tncAgreementDate": {
                    "description": "Terms and condition accepted date",
                    "type": "string"
                },
                "headquartersCountry": {
                    "description": "Country of the headquarters",
                    "type": "string"
                },
                "hostName": {
                    "description": "Host name where the request came from",
                    "type": "string",
                    "format": "uri"
                },
                "ipAddress": {
                    "description": "IP address where the request came from",
                    "type": "string",
                    "oneOf": [
                        {
                            "format": "ipv4"
                        },
                        {
                            "format": "ipv6"
                        }
                    ]
                },
                "enterpriseBilling": {
                    "description": "If enterprise billing or not",
                    "type": "boolean"
                }
            },
            "required": [
                "id",
                "platform",
                "name",
                "privacyPolicyDate",
                "tncAgreementDate",
                "headquartersCountry",
                "hostName",
                "ipAddress",
                "enterpriseBilling"
            ],
            "additionalProperties": false
        },
        "getAccountMarcoResponse": {},
        "getUsersResponse": {},
        "listAccountsRequest": {},
        "listAccountsResponse": {},
        "updateAccountRequest": {},
        "updateAccountUserResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/update-account-response+v1#",
            "title": "Update account response",
            "description": "Update account response schema",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Update account message",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ],
            "additionalProperties": false
        },
        "updateUserRequest": {},
        "updateUserResponse": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "id": "http://account.temando.com/schema/api/update-account-response+v1#",
            "title": "Update user response",
            "description": "Update user response schema",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Update user message",
                    "type": "string"
                }
            },
            "required": [
                "message"
            ],
            "additionalProperties": false
        },
        "AddressV1": {
            "description": "This is the schema for representing addresses.",
            "type": "object",
            "required": [
                "countryCode"
            ],
            "properties": {
                "addressLine": {
                    "description": "A street address and building number, newline delimited if required.",
                    "type": "string"
                },
                "addressLine2": {
                    "description": "Another street address and building number, newline delimited if required.",
                    "type": "string"
                },
                "countryCode": {
                    "description": "An ISO 3166-1 alpha-2 compliant two-letter country code.",
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 2
                },
                "postalCode": {
                    "type": "string",
                    "description": "The post or zip code of this address."
                },
                "locality": {
                    "type": "string",
                    "description": "The city or township of this address."
                },
                "administrativeArea": {
                    "type": "string",
                    "description": "The administrative area of this address, ie. state."
                },
                "longitude": {
                    "type": "number",
                    "description": "The longitude value of a geocoded address."
                },
                "latitude": {
                    "type": "number",
                    "description": "The latitude value of a geocoded address."
                }
            }
        },
        "ErrorV1": {
            "description": "Definition for error responses for this service, based on RFC 7807.",
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "format": "uri",
                    "description": "A URI reference that identifies the problem type."
                },
                "title": {
                    "type": "string",
                    "description": "A short, human-readable summary of the problem type."
                },
                "status": {
                    "type": "integer",
                    "description": "The HTTP status code generated by the origin server for this occurrence of the problem."
                },
                "detail": {
                    "type": "string",
                    "description": "A human-readable explanation specific to this occurrence of the problem."
                },
                "instance": {
                    "type": "string",
                    "description": "A URI reference that identifies the specific occurrence of the problem"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "description": "Schema errors follow the same structure as those returned by AJV.",
                        "type": "object",
                        "properties": {
                            "keyword": {
                                "type": "string"
                            },
                            "dataPath": {
                                "type": "string",
                                "description": "The JSON Pointer reference to the property that was validated."
                            },
                            "schemaPath": {
                                "type": "string",
                                "description": "The JSON Pointer reference to the schema of the keyword that failed validation."
                            },
                            "params": {
                                "type": "object"
                            },
                            "message": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "Container": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Merchant container name.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of container.",
                    "enum": [
                        "Box",
                        "Carton",
                        "Create",
                        "Cylinder",
                        "Document Envelope",
                        "Flat Pack",
                        "Letter",
                        "Pallet",
                        "Parcel",
                        "Satchel/Bag",
                        "Other"
                    ]
                },
                "outerDimensions": {
                    "description": "Dimensions object describing the actual (outer) dimensions of the container, which are used for calculating freight cost",
                    "$ref": "#/definitions/Dimensions"
                },
                "innerDimensions": {
                    "description": "Dimensions object describing the available (inner) dimensions of the container, which are used to identify available space for packing",
                    "$ref": "#/definitions/Dimensions"
                },
                "tareWeight": {
                    "description": "The unladen weight of the container",
                    "$ref": "#/definitions/Weight"
                },
                "maximumWeight": {
                    "description": "The maximum weight that the container can hold",
                    "$ref": "#/definitions/Weight"
                }
            },
            "required": [
                "name",
                "type",
                "outerDimensions",
                "innerDimensions",
                "tareWeight",
                "maximumWeight"
            ]
        },
        "Dimensions": {
            "type": "object",
            "properties": {
                "length": {
                    "description": "The length of the container",
                    "type": "number"
                },
                "width": {
                    "description": "The width of the container",
                    "type": "number"
                },
                "height": {
                    "description": "The height of the container.",
                    "type": "number"
                },
                "unitOfMeasurement": {
                    "description": "The measurement unit of the dimensions.",
                    "enum": [
                        "cm",
                        "centimeters",
                        "in",
                        "inches",
                        "m",
                        "meters",
                        "mm",
                        "millimeters",
                        "ft",
                        "feet"
                    ]
                }
            },
            "required": [
                "length",
                "width",
                "height",
                "unitOfMeasurement"
            ]
        },
        "StoredContainer": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "GUID of the container.",
                    "type": "string"
                }
            },
            "allOf": [
                {
                    "$ref": "UNDEFINED"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        },
        "Weight": {
            "type": "object",
            "properties": {
                "weight": {
                    "description": "The weight of the container.",
                    "type": "number"
                },
                "unitOfMeasurement": {
                    "description": "The measurement unit of the dimensions.",
                    "enum": [
                        "g",
                        "grams",
                        "oz",
                        "ounces",
                        "kg",
                        "kilograms",
                        "lb",
                        "pounds",
                        "ft",
                        "feet"
                    ]
                }
            },
            "required": [
                "weight",
                "unitOfMeasurement"
            ]
        },
        "Error": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string"
                        },
                        "description": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "code",
                        "description"
                    ]
                }
            },
            "required": [
                "error"
            ]
        },
        "ErrorInSchema": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "description": {
                            "type": "string"
                        },
                        "code": {
                            "type": "integer"
                        },
                        "details": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "keyword": {
                                        "type": "string"
                                    },
                                    "dataPath": {
                                        "type": "string"
                                    },
                                    "schemaPath": {
                                        "type": "string"
                                    },
                                    "params": {
                                        "type": "object",
                                        "properties": {
                                            "format": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "format"
                                        ]
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "keyword",
                                    "dataPath",
                                    "schemaPath",
                                    "params",
                                    "message"
                                ]
                            }
                        }
                    },
                    "required": [
                        "description",
                        "code",
                        "details"
                    ]
                }
            },
            "required": [
                "error"
            ]
        },
        "Location": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Merchant location name.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of location.",
                    "enum": [
                        "Store",
                        "Warehouse",
                        "Drop Shipper",
                        "Collection Point",
                        "Click & Collect",
                        "Headquarters"
                    ]
                },
                "isDefault": {
                    "description": "Indicates whether or not this is the default shipping origin",
                    "type": "boolean"
                },
                "address": {
                    "description": "Qualified address object describing a physical location",
                    "$ref": "#/definitions/QualifiedAddress"
                },
                "contact": {
                    "description": "The contact assigned to the location",
                    "$ref": "UNDEFINED"
                },
                "uniqueId": {
                    "description": "Merchant specified unique ID.",
                    "type": "string"
                },
                "enabled": {
                    "description": "Indicates whether or not this location is enabled",
                    "type": "boolean",
                    "default": true
                },
                "geodata": {
                    "description": "Geographical data describing the location",
                    "type": "object",
                    "properties": {
                        "zone": {
                            "$ref": "UNDEFINED"
                        }
                    }
                }
            },
            "required": [
                "name",
                "type",
                "isDefault",
                "address"
            ]
        },
        "QualifiedAddress": {
            "type": "object",
            "properties": {
                "line1": {
                    "description": "The first line of the address, usually the street/unit",
                    "type": "string"
                },
                "line2": {
                    "description": "The second line of the address",
                    "type": "string"
                },
                "stateProvince": {
                    "description": "State / Province",
                    "type": "string"
                },
                "postalCode": {
                    "description": "Postal Code / Zip",
                    "type": "string"
                },
                "country": {
                    "description": "Country",
                    "type": "string"
                },
                "latitude": {
                    "description": "Latitude",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude",
                    "type": "number"
                }
            },
            "required": [
                "line1",
                "stateProvince",
                "postalCode",
                "country"
            ]
        },
        "StoredLocation": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "GUID of the location.",
                    "type": "string"
                }
            },
            "allOf": [
                {
                    "$ref": "UNDEFINED"
                },
                {
                    "required": [
                        "id"
                    ]
                }
            ]
        }
    }
}
